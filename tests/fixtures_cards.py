import pytest
import random

from collections import deque

import blackjack.cards as cards
from blackjack.cards import Card, Rank, Suit

@pytest.fixture
def fix_rseed_zero():
    return random.Random(0)

@pytest.fixture
def fix_deck_rseed_zero():
    # generated by getting the output with seed 0 in the python repl and cleaning with the Haskell script.
    return deque([Card(Rank.FOUR,Suit.HEART),Card(Rank.ACE,Suit.CLUB),Card(Rank.EIGHT,Suit.SPADE),Card(Rank.FOUR,Suit.SPADE),Card(Rank.ACE,Suit.HEART),Card(Rank.NINE,Suit.CLUB),Card(Rank.SEVEN,Suit.CLUB),Card(Rank.KING,Suit.HEART),Card(Rank.THREE,Suit.CLUB),Card(Rank.KING,Suit.SPADE),Card(Rank.NINE,Suit.HEART),Card(Rank.TWO,Suit.CLUB),Card(Rank.SIX,Suit.CLUB),Card(Rank.JACK,Suit.HEART),Card(Rank.NINE,Suit.DIAMOND),Card(Rank.THREE,Suit.DIAMOND),Card(Rank.ACE,Suit.SPADE),Card(Rank.FIVE,Suit.HEART),Card(Rank.TEN,Suit.HEART),Card(Rank.SEVEN,Suit.SPADE),Card(Rank.TWO,Suit.SPADE),Card(Rank.QUEEN,Suit.CLUB),Card(Rank.FIVE,Suit.SPADE),Card(Rank.SIX,Suit.DIAMOND),Card(Rank.FOUR,Suit.DIAMOND),Card(Rank.KING,Suit.CLUB),Card(Rank.TEN,Suit.DIAMOND),Card(Rank.THREE,Suit.HEART),Card(Rank.QUEEN,Suit.SPADE),Card(Rank.KING,Suit.DIAMOND),Card(Rank.FIVE,Suit.CLUB),Card(Rank.SIX,Suit.SPADE),Card(Rank.JACK,Suit.CLUB),Card(Rank.TEN,Suit.SPADE),Card(Rank.EIGHT,Suit.CLUB),Card(Rank.THREE,Suit.SPADE),Card(Rank.SEVEN,Suit.DIAMOND),Card(Rank.TEN,Suit.CLUB),Card(Rank.NINE,Suit.SPADE),Card(Rank.TWO,Suit.DIAMOND),Card(Rank.QUEEN,Suit.HEART),Card(Rank.JACK,Suit.DIAMOND),Card(Rank.SIX,Suit.HEART),Card(Rank.EIGHT,Suit.DIAMOND),Card(Rank.ACE,Suit.DIAMOND),Card(Rank.SEVEN,Suit.HEART),Card(Rank.EIGHT,Suit.HEART),Card(Rank.FIVE,Suit.DIAMOND),Card(Rank.FOUR,Suit.CLUB),Card(Rank.TWO,Suit.HEART),Card(Rank.JACK,Suit.SPADE),Card(Rank.QUEEN,Suit.DIAMOND)])

@pytest.fixture
def fix_deck_alphabetical_52():
    suites = [Suit.CLUB, Suit.DIAMOND, Suit.HEART, Suit.SPADE]
    ranks = [Rank.TWO, Rank.THREE, Rank.FOUR, Rank.FIVE, Rank.SIX, Rank.SEVEN, Rank.EIGHT, Rank.NINE, Rank.TEN, Rank.JACK, Rank.QUEEN, Rank.KING, Rank.ACE]
    
    deck = [(suite, rank) for suite in suites for rank in ranks]
    
    return dict(deck)

@pytest.fixture
def fix_hand_one_card_raw():
    return "2C"

@pytest.fixture
def fix_hand_one_card_tups():
    return [Card(Rank.TWO,Suit.CLUB)]

@pytest.fixture
def fix_hand_pair_identical_raw():
    return "2C2C"

@pytest.fixture
def fix_hand_pair_identical_tups():
    return [Card(Rank.TWO,Suit.CLUB), Card(Rank.TWO,Suit.CLUB)]

@pytest.fixture
def fix_hand_pair_equal_low_raw():
    return "2C2D"

@pytest.fixture
def fix_hand_pair_identical_tups():
    return [Card(Rank.TWO,Suit.CLUB), Card(Rank.TWO,Suit.DIAMOND)]

@pytest.fixture
def fix_hand_pair_equal_high_common():
    return "10CJC"

@pytest.fixture
def fix_hand_fullsuit_raw():
    return "2C3C4C5C6C7C8C9C10CJCQCKCAC"

@pytest.fixture
def fix_hand_junk_raw():
    return "QWERTYUIOPASDFGHJKLZXCVBNM12345678890"

@pytest.fixture
def fix_hand_different_suit_raw():
    return "2C3D4H5S"

@pytest.fixture
def fix_hand_different_suit_tups():
    return [Card(Rank.TWO, Suit.CLUB), Card(Rank.THREE, Suit.DIAMOND), Card(Rank.FOUR, Suit.HEART), Card(Rank.FIVE, Suit.SPADE)]

@pytest.fixture
def fix_hand_alpabetical_52_raw():
    return "2C3C4C5C6C7C8C9C10CJCQCKCAC2D3D4D5D6D7D8D9D10DJDQDKDAD2H3H4H5H6H7H8H9H10HJHQHKHAH2S3S4S5S6S7S8S9S10SJSQSKSAS"

@pytest.fixture
def fix_hand_valid_interleaved():
    return "22C"

@pytest.fixture
def fix_hand_invalid_interleaved():
    return "2|C"

@pytest.fixture
def fix_hand_empty_raw():
    return ""

@pytest.fixture
def fix_hand_empty_tup():
    return []
